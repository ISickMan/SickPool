#include "crypto/hash_wrapper.hpp"

#include <gtest/gtest.h>

#include <string>

#include "../src/crypto/utils.hpp"

TEST(HashWrapperTest, VerusHash2_2)
{
    // VRSC block #1:
    // 027e3758c3a65b12aa1046462b486d0a63bfa1beae327897f56c5cfb7daaae71
    HashWrapper::InitVerusHash();
    char data[] =
        "04000100e79e17888885239ed18431c469b68f6a8b1f75f609d91d0593ad0700000000"
        "00f152ad13d884b4f2b43510645c0ca0084d58e3457f334238890db8760e5e8c6f74dd"
        "8138e98b0977ffc16dafd2da16433711d48bd11e41cdd6dc1275334a91194c050762ef"
        "b8081bcb58e2480000000000000000140000800c000000020000000000000000000000"
        "fd40050600000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000165355000000000000000000000000";

    unsigned char dataBytes[(sizeof(data)) / 2];
    Unhexlify(dataBytes, data, sizeof(data) - 1);



    unsigned char result[32];
    HashWrapper::VerushashV2b2(result, dataBytes, sizeof(dataBytes));

    char hex[64];
    Hexlify(hex, result, 32);

    printf("res: %.64s\n", hex);

    char expected[] =
        "c7860153c2390efe7481b1bbe041dd3c95404b64309852397f1e000000000000";

    ASSERT_EQ(std::memcmp(hex, expected, 64), 0);
}