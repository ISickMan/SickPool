#include "crypto/hash_wrapper.hpp"

#include <gtest/gtest.h>

#include <string>

#include "../src/crypto/utils.hpp"

TEST(HashWrapperTest, VerusHash2_2)
{
    // VRSC block #1:
    // 027e3758c3a65b12aa1046462b486d0a63bfa1beae327897f56c5cfb7daaae71
    HashWrapper::InitVerusHash();
    char data[] =
        "04000100e79e17888885239ed18431c469b68f6a8b1f75f609d91d0593ad0700000000"
        "00f152ad13d884b4f2b43510645c0ca0084d58e3457f334238890db8760e5e8c6f74dd"
        "8138e98b0977ffc16dafd2da16433711d48bd11e41cdd6dc1275334a91194c050762ef"
        "b8081bcb58e2480000000000000000140000800c000000020000000000000000000000"
        "fd40050600000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000165355000000000000000000000000";

    unsigned char dataBytes[(sizeof(data)) / 2];
    Unhexlify(dataBytes, data, sizeof(data) - 1);

    CVerusHashV2 hasher(SOLUTION_VERUSHHASH_V2_2);

    unsigned char result[32];
    HashWrapper::VerushashV2b2(result, dataBytes, sizeof(dataBytes), &hasher);

    char hex[64];
    Hexlify(hex, result, 32);

    // printf("res: %.64s\n", hex);

    char expected[] =
        "c7860153c2390efe7481b1bbe041dd3c95404b64309852397f1e000000000000";

    ASSERT_EQ(std::memcmp(hex, expected, 64), 0);
}

TEST(HashWrapperTest, X25X)
{
    // SINOVATE block #999999:
    // 0727fc337d88aa091d57804f63d72ee58510afc79a3488580dba4abdf7c00364
    unsigned char dataBytes[] = {
        0x00, 0x00, 0x00, 0x20, 0x0e, 0xf9, 0xf3, 0xb0, 0x49, 0xbb, 0xdd, 0xb2,
        0x95, 0x2e, 0x0d, 0xf7, 0x59, 0x82, 0xc9, 0x61, 0xbc, 0x2e, 0x50, 0x24,
        0x42, 0x93, 0x45, 0x35, 0xc2, 0x60, 0x08, 0xd5, 0x08, 0x84, 0x43, 0x49,
        0xcf, 0xd0, 0xb6, 0xda, 0x5b, 0x7e, 0xca, 0x8d, 0x56, 0xed, 0x8a, 0xde,
        0x13, 0x67, 0x22, 0x20, 0x71, 0x83, 0xa2, 0xa1, 0xe3, 0x42, 0xb0, 0x1f,
        0x76, 0x53, 0xf2, 0x8c, 0x83, 0x0a, 0xaa, 0xe1, 0xe0, 0xac, 0xa1, 0x62,
        0x3b, 0xf0, 0x5b, 0x1c, 0x04, 0x68, 0x15, 0x12};

    unsigned char result[32] = {0};
    HashWrapper::X25X(result, dataBytes);

    char hex[64] = {0};
    Hexlify(hex, result, 32);

    printf("res: %.64s\n", hex);

    char expected[] =
        "f1fdef1c3b32d40a1fec2f5d9f77fd911eb869bb2072a927925f702300000000";

    ASSERT_EQ(std::memcmp(hex, expected, 64), 0);
}