#include <benchmark/benchmark.h>

#include "stratum_client.hpp"
#include <iostream>
#include "crypto/utils.hpp"
#include "crypto/hash_wrapper.hpp"
// #include "src/utils.hpp"
#define BLOCK_HEADER_SIZE (140 + 3 + 1344)

static void BM_HashBH(benchmark::State& state)
{
    // VRSC block #1900000:
    // 0000000000001e7f39529830644b40953cdd41e0bbb18174fe0e39c2530186c7
    HashWrapper::InitVerusHash();
    char data[] =
        "04000100e79e17888885239ed18431c469b68f6a8b1f75f609d91d0593ad0700000000"
        "00f152ad13d884b4f2b43510645c0ca0084d58e3457f334238890db8760e5e8c6f74dd"
        "8138e98b0977ffc16dafd2da16433711d48bd11e41cdd6dc1275334a91194c050762ef"
        "b8081bcb58e2480000000000000000140000800c000000020000000000000000000000"
        "fd40050600000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000165355000000000000000000000000";

    unsigned char dataBytes[(sizeof(data)) / 2];
    Unhexlify(dataBytes, data, sizeof(data) - 1);

    unsigned char res[32] = {0};
    // Unhexlify()
    StratumClient cli(0, 0, 0);

    for (auto _ : state)
    {
        HashWrapper::VerushashV2b2(res, dataBytes, BLOCK_HEADER_SIZE, cli.GetHasher());
    }
}

#define A "AAA"
#define B "BBB"
static void BM_StrConcat(benchmark::State& state)
{
    for (auto _ : state)
    {
        auto c = A B;
    }
}

static void BM_StrConcat2(benchmark::State& state)
{
    for (auto _ : state)
    {   
        char a[7] = "AAA";
        auto b = "BBB";
        strcat(a, b);
    }
}

BENCHMARK(BM_StrConcat);
BENCHMARK(BM_StrConcat2);
BENCHMARK(BM_HashBH);
// BENCHMARK_MAIN();
